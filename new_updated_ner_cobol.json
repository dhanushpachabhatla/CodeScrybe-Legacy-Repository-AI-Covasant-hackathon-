[
  {
    "file": "cloned_repos/Cobol-bank-system\\bankstatement.cbl",
    "chunk_id": 0,
    "language": "COBOL",
    "feature": "Bank Statement Processing",
    "description": "Defines the file control, data structures, and working storage for processing bank statements.  It reads bank statement data from an indexed file and prepares it for display.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [],
    "requirements": [
      "Requires an input file named 'input/statement.data' to exist in the specified location.",
      "The input file must be an indexed file.",
      "File should contain data compatible with the WS-MOVEMENT data structure."
    ],
    "comments": [],
    "annotations": {
      "developer_notes": "The organization is INDEXED and ACCESS is RANDOM, suggesting that the 'input/statement.data' file is an indexed file that allows random access using a key."
    },
    "code": "FILE-CONTROL.\n                    SELECT STATEMENT-IN ASSIGN TO 'input/statement.data'\n                    ORGANIZATION IS INDEXED\n                    ACCESS IS RANDOM.\n\n       DATA DIVISION.\n\n       FILE SECTION.\n\n\n       WORKING-STORAGE SECTION.\n       01 WS-MOVEMENT.\n           05 WS-VALUE PIC 9(10)V9(2).\n           05 WS-OBSERVATION PIC A(255).\n           05 WS-DATE PIC A(8).\n       01 WS-EOF PIC A(1) VALUE 'N'.\n\n\n       PROCEDURE DIVISION."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\bankstatement.cbl",
    "chunk_id": 1,
    "language": "COBOL",
    "feature": "Reading Bank Statement Data",
    "description": "Reads records from the STATEMENT-IN file into the WS-MOVEMENT working storage. The loop continues until the end of the file is reached.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [
      "WS-EOF is modified to 'Y' when the end of the file is reached."
    ],
    "requirements": [
      "STATEMENT-IN must be opened in INPUT mode before this procedure is called.",
      "STATEMENT-IN must be a valid indexed file.",
      "The structure of data in STATEMENT-IN should match WS-MOVEMENT"
    ],
    "comments": [],
    "annotations": {
      "developer_notes": "The PERFORM UNTIL loop reads the STATEMENT-IN file record by record until the end of file is reached, setting the WS-EOF flag to 'Y'."
    },
    "code": "STATEMENT-SHOW-PROCEDURE.\n           OPEN INPUT STATEMENT-IN.\n               PERFORM UNTIL WS-EOF = 'Y'\n               READ STATEMENT-IN INTO WS-MOVEMENT\n                    AT END MOVE 'Y' TO WS-EOF"
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\bankstatement.cbl",
    "chunk_id": 2,
    "language": "COBOL",
    "feature": "Displaying Bank Statement Data",
    "description": "Displays the contents of WS-MOVEMENT and terminates the program.",
    "functions": [],
    "classes": [],
    "apis": [
      "DISPLAY",
      "STOP RUN"
    ],
    "database_tables": [],
    "inputs": [],
    "outputs": [
      "Displays the value of WS-MOVEMENT to the console."
    ],
    "dependencies": [],
    "side_effects": [
      "Program execution is terminated."
    ],
    "requirements": [
      "WS-MOVEMENT must contain valid data before this segment is executed.",
      "STATEMENT-IN file read operation should be completed before displaying WS-MOVEMENT."
    ],
    "comments": [],
    "annotations": {
      "developer_notes": "This code displays the data and stops the execution of the program."
    },
    "code": "END-PERFORM.\n           DISPLAY WS-MOVEMENT.\n           STOP RUN.\n       END PROGRAM BANK-STATEMENT."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\bankstatementsave.cbl",
    "chunk_id": 1,
    "language": "COBOL",
    "feature": "Conditional logic",
    "description": "Ends an IF statement block.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [],
    "requirements": [],
    "comments": [],
    "annotations": {
      "developer_notes": "Marks the end of a conditional code block."
    },
    "code": "END-IF."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\bankstatementsave.cbl",
    "chunk_id": 2,
    "language": "COBOL",
    "feature": "Program Termination",
    "description": "Terminates the program and returns control to the calling program.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [
      "Program execution is terminated."
    ],
    "requirements": [],
    "comments": [],
    "annotations": {
      "developer_notes": "The goback statement returns control to the caller of this COBOL program."
    },
    "code": "goback."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\main.cob",
    "chunk_id": 1,
    "language": "COBOL",
    "feature": "Program Termination",
    "description": "Closes the IN-PUT file and terminates the program.",
    "functions": [],
    "classes": [],
    "apis": [
      "CLOSE",
      "STOP RUN"
    ],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [
      "Program execution is terminated.",
      "The IN-PUT file is closed, releasing any associated resources."
    ],
    "requirements": [
      "The IN-PUT file should be opened before this segment is executed."
    ],
    "comments": [],
    "annotations": {
      "developer_notes": "Closes the file and stops program execution."
    },
    "code": "END-PERFORM.\n           CLOSE IN-PUT.\n           STOP RUN."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\people.cob",
    "chunk_id": 1,
    "language": "COBOL",
    "feature": "File Closing",
    "description": "Closes the PEOPLE-IN file.",
    "functions": [],
    "classes": [],
    "apis": [
      "CLOSE"
    ],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [
      "PEOPLE-IN file is closed."
    ],
    "requirements": [
      "The PEOPLE-IN file must be open before calling CLOSE."
    ],
    "comments": [],
    "annotations": {
      "developer_notes": "This code snippet is responsible for closing the PEOPLE-IN file after processing."
    },
    "code": "END-PERFORM.\n           CLOSE PEOPLE-IN."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\people.cob",
    "chunk_id": 2,
    "language": "COBOL",
    "feature": "Program Termination",
    "description": "Terminates the current program and returns control to the calling program.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [
      "Program execution is terminated."
    ],
    "requirements": [],
    "comments": [],
    "annotations": {
      "developer_notes": "The 'goback' statement terminates the current program and returns control to the calling program."
    },
    "code": "goback."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\peopleget.cbl",
    "chunk_id": 1,
    "language": "COBOL",
    "feature": "Retrieving and Checking People Data",
    "description": "This code reads CPF from an input file, checks if a person with the CPF exists in the PEOPLE-RW file, writes the result to the EXISTS-RW file, and closes the files.",
    "functions": [],
    "classes": [],
    "apis": [
      "CLOSE",
      "DISPLAY",
      "OPEN",
      "READ",
      "WRITE"
    ],
    "database_tables": [
      "PEOPLE-RW",
      "EXISTS-RW"
    ],
    "inputs": [
      "WS-CPF from input file"
    ],
    "outputs": [
      "WS-CPF displayed to console",
      "WS-EXSIST displayed to console",
      "EXISTS-RW-FILE is written with WS-EXSIST"
    ],
    "dependencies": [],
    "side_effects": [
      "Data is read from IN-PUT.",
      "PEOPLE-RW file is read and potentially updated.",
      "EXISTS-RW file is written to.",
      "WS-CPF and WS-EXSIST are displayed on the console."
    ],
    "requirements": [
      "The IN-PUT file must be open before being closed.",
      "The PEOPLE-RW file must be an indexed file.",
      "EXISTS-RW must be properly defined to store a single character value.",
      "The input file must contain data for WS-CPF"
    ],
    "comments": [],
    "annotations": {
      "developer_notes": "This code performs the operation of checking a CPF against the PEOPLE-RW file and records whether or not a matching record was found by writing to the EXISTS-RW file."
    },
    "code": "END-PERFORM.\n           CLOSE IN-PUT.\n           DISPLAY WS-CPF\n           OPEN I-O PEOPLE-RW\n               MOVE WS-CPF TO PEOPLE-RW-CPF\n               READ PEOPLE-RW\n                   KEY IS PEOPLE-RW-CPF\n                   INVALID KEY MOVE \"0\" TO WS-EXSIST\n                   NOT INVALID KEY MOVE \"1\" TO WS-EXSIST\n               END-READ\n           CLOSE PEOPLE-RW.\n           DISPLAY WS-EXSIST\n           OPEN EXTEND EXISTS-RW.\n               MOVE WS-EXSIST TO EXISTS-RW-ERROR\n               WRITE EXISTS-RW-FILE"
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\peopleget.cbl",
    "chunk_id": 2,
    "language": "COBOL",
    "feature": "File Write End",
    "description": "Ends the WRITE operation.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [],
    "requirements": [],
    "comments": [],
    "annotations": {
      "developer_notes": "Marks the end of write operation."
    },
    "code": "END-WRITE.\n           CLOSE EXISTS-RW."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\peopleget.cbl",
    "chunk_id": 3,
    "language": "COBOL",
    "feature": "Program Termination",
    "description": "Terminates the program and returns control to the calling program.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [
      "Program execution is terminated."
    ],
    "requirements": [],
    "comments": [],
    "annotations": {
      "developer_notes": "This code terminates program execution by returning control to the calling program."
    },
    "code": "goback."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\peopleLogin.cbl",
    "chunk_id": 1,
    "language": "COBOL",
    "feature": "People Login Process",
    "description": "Reads CPF from input, checks if it exists in PEOPLE-RW, writes existence status to EXISTS-RW.",
    "functions": [],
    "classes": [],
    "apis": [
      "CLOSE",
      "DISPLAY",
      "OPEN",
      "READ",
      "WRITE"
    ],
    "database_tables": [
      "PEOPLE-RW",
      "EXISTS-RW"
    ],
    "inputs": [
      "WS-CPF from IN-PUT"
    ],
    "outputs": [
      "WS-CPF, WS-EXSIST to console, EXISTS-RW-FILE with WS-EXSIST"
    ],
    "dependencies": [],
    "side_effects": [
      "Reads from IN-PUT file.",
      "Reads from PEOPLE-RW file.",
      "Writes to EXISTS-RW file.",
      "Displays WS-CPF and WS-EXSIST on the console."
    ],
    "requirements": [
      "IN-PUT file must be open before being closed.",
      "PEOPLE-RW file must be an indexed file.",
      "EXISTS-RW file must be defined.",
      "The input should contain valid CPF data."
    ],
    "comments": [],
    "annotations": {
      "developer_notes": "This code snippet simulates a login process by reading a CPF, searching a PEOPLE file and writing the result to another file."
    },
    "code": "END-PERFORM.\n           CLOSE IN-PUT.\n           DISPLAY WS-CPF\n           OPEN I-O PEOPLE-RW\n               MOVE WS-CPF TO PEOPLE-RW-CPF\n               READ PEOPLE-RW INTO WS-PEOPLE-FILE-IN\n                   KEY IS PEOPLE-RW-CPF\n                   INVALID KEY MOVE \"0\" TO WS-EXSIST\n                   NOT INVALID KEY\n                   MOVE \"1\" TO WS-EXSIST\n               END-READ\n           CLOSE PEOPLE-RW.\n           DISPLAY WS-EXSIST\n           OPEN EXTEND EXISTS-RW.\n               MOVE WS-EXSIST TO EXISTS-RW-ERROR\n               WRITE EXISTS-RW-FILE"
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\peopleLogin.cbl",
    "chunk_id": 2,
    "language": "COBOL",
    "feature": "File Write End",
    "description": "Marks the end of the WRITE statement.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [],
    "requirements": [],
    "comments": [],
    "annotations": {
      "developer_notes": "This code marks the end of a write operation."
    },
    "code": "END-WRITE.\n           CLOSE EXISTS-RW."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\peopleLogin.cbl",
    "chunk_id": 3,
    "language": "COBOL",
    "feature": "Program Termination",
    "description": "Terminates the program and returns control to the calling program.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [
      "Program execution stops, and control is passed back to the calling program."
    ],
    "requirements": [],
    "comments": [],
    "annotations": {
      "developer_notes": "This segment of code ends the program and returns to the caller."
    },
    "code": "goback."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\peopleName.cbl",
    "chunk_id": 1,
    "language": "COBOL",
    "feature": "Retrieving a Person's Name by CPF",
    "description": "Reads a CPF from input, retrieves the corresponding name from PEOPLE-RW file, and writes the name to EXISTS-RW file.",
    "functions": [],
    "classes": [],
    "apis": [
      "CLOSE",
      "DISPLAY",
      "OPEN",
      "READ",
      "WRITE"
    ],
    "database_tables": [
      "PEOPLE-RW",
      "EXISTS-RW"
    ],
    "inputs": [
      "WS-CPF from IN-PUT"
    ],
    "outputs": [
      "WS-CPF to console",
      "WS-Nome to console",
      "EXISTS-RW-FILE with WS-Nome"
    ],
    "dependencies": [],
    "side_effects": [
      "Reads CPF from IN-PUT.",
      "Reads person data from PEOPLE-RW file based on CPF.",
      "Writes the person's name to EXISTS-RW file.",
      "Displays WS-CPF and WS-Nome to console."
    ],
    "requirements": [
      "IN-PUT file must be open before being closed.",
      "PEOPLE-RW file must be an indexed file with CPF as the key.",
      "EXISTS-RW file must be defined.",
      "IN-PUT should contain valid CPF."
    ],
    "comments": [],
    "annotations": {
      "developer_notes": "This code retrieves a person's name based on a CPF and stores it in a file. If CPF is not found, an empty string is returned."
    },
    "code": "END-PERFORM.\n           CLOSE IN-PUT.\n           DISPLAY WS-CPF\n           OPEN I-O PEOPLE-RW\n               MOVE WS-CPF TO PEOPLE-RW-CPF\n               READ PEOPLE-RW into WS-PEOPLE-FILE-IN\n                   KEY IS PEOPLE-RW-CPF\n                   INVALID KEY MOVE \"\" TO WS-Nome\n                  NOT INVALID KEY MOVE WS-PEOPLE-FILE-IN-NAME TO WS-Nome\n               END-READ\n           CLOSE PEOPLE-RW.\n           DISPLAY WS-Nome\n           OPEN EXTEND EXISTS-RW.\n               MOVE WS-Nome TO EXISTS-RW-NAME\n               WRITE EXISTS-RW-FILE"
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\peopleName.cbl",
    "chunk_id": 2,
    "language": "COBOL",
    "feature": "End of File Write",
    "description": "Marks the end of the WRITE statement.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [],
    "requirements": [],
    "comments": [],
    "annotations": {
      "developer_notes": "End write operation."
    },
    "code": "END-WRITE.\n           CLOSE EXISTS-RW."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\peopleName.cbl",
    "chunk_id": 3,
    "language": "COBOL",
    "feature": "Program Termination",
    "description": "Terminates the program and returns control to the calling program.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [
      "Program is terminated."
    ],
    "requirements": [],
    "comments": [],
    "annotations": {
      "developer_notes": "This segment of code ends the current COBOL program and returns control to the calling program using the 'goback' statement."
    },
    "code": "goback."
  },
  {
    "file": "cloned_repos/Cobol-bank-system\\peoplesave.cob",
    "chunk_id": 1,
    "language": "COBOL",
    "feature": "Program Termination",
    "description": "Terminates the program and returns control to the calling program.",
    "functions": [],
    "classes": [],
    "apis": [],
    "database_tables": [],
    "inputs": [],
    "outputs": [],
    "dependencies": [],
    "side_effects": [
      "Program execution is terminated."
    ],
    "requirements": [],
    "comments": [],
    "annotations": {
      "developer_notes": "The 'goback' statement returns control to the caller."
    },
    "code": "goback."
  }
]